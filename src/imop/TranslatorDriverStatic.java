package imop;
import imop.ast.node.external.Declaration;
import imop.lib.builder.Builder;
import imop.lib.util.DumpSnapshot;
import imop.parser.FrontEnd;
import imop.parser.Program;
public class TranslatorDriverStatic {
	public static void main(String[] args) {
		Program.parseNormalizeInput(args);
		addToUDFs();
		TranslatorStatic.closureVarName = Builder.getNewTempName("clsr_v");
		TranslatorStatic.waitClosureVarName = Builder.getNewTempName("waitClsr_v");
		String declareClosure = "struct Clsr *"+TranslatorStatic.closureVarName+";";
		Builder.addDeclarationToGlobals(MUWOmpConverterStatic.indexFunction(Program.getRoot().getInfo().getMainFunction()),FrontEnd.parseAndNormalize(declareClosure,Declaration.class));
		MUWOmpConverterStatic.nIterationsVarName = Builder.getNewTempName("nIters");
		String nIterationsDecl = "int "+MUWOmpConverterStatic.nIterationsVarName+";";
		Builder.addDeclarationToGlobals(0, FrontEnd.parseAndNormalize(nIterationsDecl,Declaration.class));
		MUWOmpConverterStatic muWOmp = new MUWOmpConverterStatic();
		MUWOmpConverterStatic.populateSignalWaitCallInductionVariables();
		TranslatorStatic translator = new TranslatorStatic();
		muWOmp.setupEnvironment();
		translator.translate();
		DumpSnapshot.dumpRoot("processed");
	}
	public static void addToUDFs() {

		TranslatorStatic.UDFs.add("createClosure");
		TranslatorStatic.UDFs.add("cleanup");
		TranslatorStatic.UDFs.add("COPYINT");
		TranslatorStatic.UDFs.add("COPYFLOAT");
		TranslatorStatic.UDFs.add("COPYDOUBLE");
		TranslatorStatic.UDFs.add("COPYCHAR");
		TranslatorStatic.UDFs.add("ADDINT");
		TranslatorStatic.UDFs.add("ADDFLOAT");
		TranslatorStatic.UDFs.add("ADDDOUBLE");
		TranslatorStatic.UDFs.add("SUBINT");
		TranslatorStatic.UDFs.add("SUBFLOAT");
		TranslatorStatic.UDFs.add("myWaitSignalAll");
		TranslatorStatic.UDFs.add("SUBDOUBLE");
		TranslatorStatic.UDFs.add("MULINT");
		TranslatorStatic.UDFs.add("MULFLOAT");
		TranslatorStatic.UDFs.add("MULDOUBLE");
		TranslatorStatic.UDFs.add("waitWrapper");
		TranslatorStatic.UDFs.add("signalWrapper");
		TranslatorStatic.UDFs.add("allocateMemoryForReduction");
		TranslatorStatic.UDFs.add("buildReductionClosure");
		TranslatorStatic.UDFs.add("performReduction");
		TranslatorStatic.UDFs.add("DIVINT");
		TranslatorStatic.UDFs.add("DIVFLOAT");
		TranslatorStatic.UDFs.add("DIVDOUBLE");
		TranslatorStatic.UDFs.add("createMessage");
		TranslatorStatic.UDFs.add("createNode");
		TranslatorStatic.UDFs.add("createQueue");
		TranslatorStatic.UDFs.add("isEmpty");
		TranslatorStatic.UDFs.add("deQueueMessage");
		TranslatorStatic.UDFs.add("enQueueMessage");
		TranslatorStatic.UDFs.add("incrementCounter");
		TranslatorStatic.UDFs.add("decrementCounter");
		TranslatorStatic.UDFs.add("checkPostbox");
		TranslatorStatic.UDFs.add("receiveMessage");
		TranslatorStatic.UDFs.add("postMessage");
		TranslatorStatic.UDFs.add("initialisePostBox");
		TranslatorStatic.UDFs.add("mySignalAllSend");
		TranslatorStatic.UDFs.add("mySignalAll");
		TranslatorStatic.UDFs.add("mySignalSend");
		TranslatorStatic.UDFs.add("mySignal");
		TranslatorStatic.UDFs.add("mSignalAll");
		TranslatorStatic.UDFs.add("mSignal");
		TranslatorStatic.UDFs.add("COPY");
		TranslatorStatic.UDFs.add("ADD");
		TranslatorStatic.UDFs.add("SUB");
		TranslatorStatic.UDFs.add("MULT");
		TranslatorStatic.UDFs.add("DIV");
		TranslatorStatic.UDFs.add("myWaitAll");
		TranslatorStatic.UDFs.add("myWait");
		TranslatorStatic.UDFs.add("myWaitRed");
		TranslatorStatic.UDFs.add("myWaitAllRed");
		TranslatorStatic.UDFs.add("performReduction");
		TranslatorStatic.UDFs.add("mWaitAll");
		TranslatorStatic.UDFs.add("mWait");
		TranslatorStatic.UDFs.add("executeWaitClosureAll");
		TranslatorStatic.UDFs.add("executeWaitClosure");
		TranslatorStatic.UDFs.add("createWaitClosureAll");
		TranslatorStatic.UDFs.add("createWaitClosure");
		TranslatorStatic.UDFs.add("createWorklistQueue");
		TranslatorStatic.UDFs.add("createClosureNode");
		TranslatorStatic.UDFs.add("isEmptyWorklist");
		TranslatorStatic.UDFs.add("enqueueClosure");
		TranslatorStatic.UDFs.add("dequeueClosure");
		TranslatorStatic.UDFs.add("checkThreadStatus");
		TranslatorStatic.UDFs.add("executeReadyWorkList");
		TranslatorStatic.UDFs.add("scheduler");
		TranslatorStatic.UDFs.add("lastFunction");
		TranslatorStatic.UDFs.add("_OSSwapInt64");
		TranslatorStatic.UDFs.add("_OSSwapInt32");
		TranslatorStatic.UDFs.add("_OSSwapInt16");
		TranslatorStatic.UDFs.add("__sputc");
		TranslatorStatic.UDFs.add("__inline_isinfd");
		TranslatorStatic.UDFs.add("__darwin_fd_set");
		TranslatorStatic.UDFs.add("__inline_signbitf");
		TranslatorStatic.UDFs.add("__sincospi");
		TranslatorStatic.UDFs.add("__sincosf");
		TranslatorStatic.UDFs.add("__inline_isnand");
		TranslatorStatic.UDFs.add("__inline_isnormall");
		TranslatorStatic.UDFs.add("__inline_signbitl");
		TranslatorStatic.UDFs.add("printMatrix");
		TranslatorStatic.UDFs.add("__inline_isnanl");
		TranslatorStatic.UDFs.add("__sincospif");
		TranslatorStatic.UDFs.add("__sincos");
		TranslatorStatic.UDFs.add("__inline_isinfl");
		TranslatorStatic.UDFs.add("__inline_isnormalf");
		TranslatorStatic.UDFs.add("init");
		TranslatorStatic.UDFs.add("getruntime");
		TranslatorStatic.UDFs.add("__inline_isnanf");
		TranslatorStatic.UDFs.add("__darwin_check_fd_set");
		TranslatorStatic.UDFs.add("__inline_isfinitel");
		TranslatorStatic.UDFs.add("__inline_isnormald");
		TranslatorStatic.UDFs.add("__inline_isfinitef");
		TranslatorStatic.UDFs.add("__inline_isinff");
		TranslatorStatic.UDFs.add("__darwin_fd_isset");
		TranslatorStatic.UDFs.add("__inline_signbitd");
		TranslatorStatic.UDFs.add("__inline_isfinited");
		TranslatorStatic.UDFs.add("__darwin_fd_clr");
		TranslatorStatic.UDFs.add("handleReduction");
		TranslatorStatic.UDFs.add("setupReduction");
		TranslatorStatic.UDFs.add("waitWrapper");
		TranslatorStatic.UDFs.add("signalWrapper");
		TranslatorStatic.UDFs.add("isEmptyReadyWorklist");
		TranslatorStatic.UDFs.add("isEmptyPendingWorklist");
		TranslatorStatic.UDFs.add("enqueueClosureReadyWorklist");
		TranslatorStatic.UDFs.add("enqueueClosurePendingWorklist");
		TranslatorStatic.UDFs.add("dequeueClosureReadyWorklist");
		TranslatorStatic.UDFs.add("movePendingToReady");
		TranslatorStatic.UDFs.add("executeReadyWorkList");
	}

}
